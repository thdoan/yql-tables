<?xml version="1.0" encoding="UTF-8"?>
<table xmlns:i="http://query.yahooapis.com/v1/schema/internalTable.xsd" xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <author>T. H. Doan (forked from data.headers table by Marcel Duran)</author>
    <description>
      Request a URL and retrieve its headers and content (non-binary only). Parameters:

      url (required) = URL to query.
      css (optional) = CSS selector to extract content from.
      format (optional) = "htmlstring" to return a flat HTML string or "nodetree" to return a structured node tree; default is "raw", which is whatever the server returns.
      showheaders (optional) = "true" to include response headers.
      ua (optional) = User Agent string to spoof, or "desktop"/"mobile" to use generic desktop/mobile UA; defaults to "desktop".
      xpath (optional) = XPath to extract content from.

      If both 'css' and 'xpath' are provided, then 'xpath' takes precedence. Forked from https://github.com/yql/yql-tables/blob/master/data/data.headers.xml.
    </description>
    <sampleQuery>select * from {table} where url="https://www.yahoo.com/" and ua="Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)"</sampleQuery>
    <sampleQuery>select * from {table} where url="https://www.yahoo.com/" and css="title"</sampleQuery>
    <sampleQuery>select * from {table} where url="https://www.yahoo.com/" and xpath="//title"</sampleQuery>
    <sampleQuery>select * from {table} where url in ("https://www.yahoo.com/","https://www.google.com/")</sampleQuery>
  </meta>
  <bindings>
    <select itemPath="" produces="XML">
      <inputs>
        <key id="url" type="xs:string" paramType="variable" required="true"/>
        <key id="css" type="xs:string" paramType="variable" required="false"/>
        <key id="format" type="xs:string" paramType="variable" required="false"/>
        <key id="showheaders" type="xs:string" paramType="variable" required="false"/>
        <key id="ua" type="xs:string" paramType="variable" required="false"/>
        <key id="xpath" type="xs:string" paramType="variable" required="false"/>
      </inputs>
      <execute>
        <![CDATA[
        var count, headers, location, redirect, resp,
          content = '',
          data = <result/>,
          req = y.rest(url);

        // Set user agent (default to desktop)
        if (ua==='desktop' || !ua) ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36';
        else if (ua==='mobile') ua = 'Mozilla/5.0 (Linux; Android 8.0.0; 2PZC5 Build/OPR6.170623.013) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Mobile Safari/537.36';
        req.header('User-Agent', ua);
        y.log('user agent: ' + ua);

        // Set compression
        req.header('Accept-Encoding', 'gzip, deflate, br');
        req.decompress(true);

        // Set miscellaneous headers
        // Copied from Google Chrome
        req.header('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8');
        req.header('Cache-Control', 'max-age=0');

        // Bad servers don't set charset
        // YQL tries UTF-8 first, then we try ISO as a fallback
        req.fallbackCharset('ISO-8859-1');

        // Fetch URL
        // accept('text/html') is required for toXMLString() and xpath()
        resp = ((css || xpath || format==='htmlstring' || format==='nodetree') ? req.accept('text/html') : req).jsonCompat('new').get();
        y.log('response length: ' + (resp.response && resp.response.length));

        // Check redirect
        redirect = y.diagnostics.redirect;
        count = redirect && redirect.length();
        if (count) {
          for (var i=0, redir; i<count; ++i) {
            redir = redirect[i];
            y.log('redirect: ' + redir.@status + ' = ' + redir.toString());
            location = redir.toString();
            if (location) {
              data.result +=
                <redirect>
                    <url>{url}</url>
                    <status>{redir.@status}</status>
                    <headers>
                        <Location>{location}</Location>
                    </headers>
                </redirect>;
              url = location;
            }
          }
        }

        // Set result
        data.result += <url>{url}</url>;
        data.result += <status>{resp.status}</status>;

        // Get headers?
        headers = resp.headers;
        if (showheaders==='true') data.result += <headers>{y.jsonToXml(headers)}</headers>;

        // Get uncompressed response content for non-binary
        headers = (headers && headers['content-type']) || '';
        if (headers.indexOf('image') && headers.indexOf('x-shockwave-flash')<0) {
          try {
            content = resp.response;
            if (xpath) {
              content = y.xpath(content, xpath);
            } else if (css) {
               y.include('https://cdn.jsdelivr.net/npm/thd-yql-tables@1.0.0/css2xpath.min.js');
               content = y.xpath(content, css2xpath(css));
            }
          } catch (err) {
            y.log(err);
          }
        }
        if (format==='htmlstring') content = content.toXMLString();

        data.result += <content>{content}</content>;

        // Cache data for 5 minutes (300 seconds)
        response.maxAge = 300;
        response.object = data;
        ]]>
      </execute>
    </select>
  </bindings>
</table>
