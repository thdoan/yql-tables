<?xml version="1.0" encoding="UTF-8"?>
<table xmlns:i="http://query.yahooapis.com/v1/schema/internalTable.xsd" xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
  <meta>
    <author>Marcel Duran (modified by T. H. Doan)</author>
    <description>Request (GET) a URL and retrieve its content (non-binary) and headers. User Agent string (ua) and XPath selector (xpath) are optional. Forked from https://github.com/yql/yql-tables/blob/master/data/data.headers.xml.</description>
    <sampleQuery>select * from {table} where url="http://www.yahoo.com"</sampleQuery>
    <sampleQuery>select * from {table} where url in ("http://www.yahoo.com","http://www.google.com") and ua="Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1)"</sampleQuery>
  </meta>
  <bindings>
    <select itemPath="" produces="XML">
      <inputs>
         <key id="url" type="xs:string" paramType="variable" required="true" />
         <key id="ua" type="xs:string" paramType="variable" required="false" />
         <key id="xpath" type="xs:string" paramType="variable" required="false" />
      </inputs>
      <execute>
        <![CDATA[
        var content, count, header, location, redir, redirect, resp,
          data = <resources/>,
          headers = <headers/>,
          req = y.rest(url);

        // Set user agent
        if (ua==='desktop' || !ua) ua = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36';
        // Samsung S9
        else if (ua==='mobile') ua = 'Mozilla/5.0 (Linux; Android 8.0.0; SM-G960F Build/R16NW) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Mobile Safari/537.36'
        req.header('User-Agent', ua);

        // Set compression
        req.header('Accept-Encoding', 'gzip,deflate');
        req.decompress(true);

        // Bad servers don't set charset
        // YQL tries UTF-8 first, then we try ISO as a fallback
        req.fallbackCharset('ISO-8859-1');

        // Fetch URL
        resp = req.get();
        y.log('response length: ' + (resp.response && resp.response.length));

        // Check redirect
        redirect = y.diagnostics.redirect;
        count = redirect && redirect.length();
        if (count) {
          for (i=0; i<count; ++i) {
            redir = redirect[i];
            y.log('redirect: ' + redir.@status + ' = ' + redir.toString());
            location = redir.toString();
            if (location) {
              data.resources +=
                <redirect>
                    <url>{url}</url>
                    <status>{redir.@status}</status>
                    <headers>
                        <Location>{location}</Location>
                    </headers>
                </redirect>;
              url = location;
            }
          }
        }

        // Get headers
        headers.headers = y.jsonToXml(resp.headers);

        // Set result
        data.resources += <url>{url}</url>;
        data.resources += <status>{resp.status}</status>;
        data.resources += headers;

        // Get uncompressed response content for non-binary
        header = resp.headers;
        header = (header && header['content-type']) || '';
        if (header.indexOf('image') && header.indexOf('x-shockwave-flash')<0) {
          try {
            content = resp.response;
            if (xpath) content = y.xpath(content, xpath);
          } catch (err) {
            y.log(err);
            // Empty response on error
            content = '';
          }
        } else {
          // Empty response for binaries
          content = '';
        }

        data.resources += <content>{content}</content>;

        response.maxAge = 300;
        response.object = data;
        ]]>
      </execute>
    </select>
  </bindings>
</table>
